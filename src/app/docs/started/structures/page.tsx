import { CodeBlock } from "@/components/CodeBlock";
import Mark from "@/components/Mark";
import Link from "next/link";

export default function StructurePage() {
    return (
        <main className="flex-1 flex flex-col gap-5 pt-5 pb-10 text-white/80">
            <h1 className="text-2xl font-bold">Structure et organisation du projet</h1>

            <Mark>
                Cette page fournit un aper√ßu des conventions de dossiers et de fichiers dans Nexy, ainsi que des conseils pour organiser votre projet de mani√®re optimale.
            </Mark>

            <h3 className="text-lg font-medium">Conventions de dossiers et de fichiers</h3>
            <p className="text-base font-light">
                Les dossiers de niveau sup√©rieur sont utilis√©s pour organiser le code et les ressources statiques de votre application.
            </p>
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÅ app/         # Routeur d'application
üìÅ public/      # Actifs statiques √† servir
.../
`} />

            <p className="text-base font-light">
                Les fichiers de niveau sup√©rieur sont utilis√©s pour configurer votre application, g√©rer les d√©pendances, ex√©cuter des intergiciels, int√©grer des outils de surveillance et d√©finir des variables d&apos;environnement.
            </p>
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÑ nexy-config.py   # Fichier de configuration pour Nexy
üìÑ requirements.txt # D√©pendances et scripts du projet  
üìÑ middleware.py    # Intergiciel de requ√™te Nexy
üìÑ .env             # Variables d&apos;environnement
üìÑ .gitignore       # Fichiers et dossiers Git √† ignorer`} />

            <h3 className="text-lg font-medium">Fichiers de routage</h3>
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÑ controller.py   # Le seul fichier routable dans Nexy
üìÑ layout.html     # Mise en page
üìÑ view.html       # Page de routage
üìÑ not-found.html  # Interface utilisateur non trouv√©e
üìÑ error.html      # Interface utilisateur d&apos;erreur
`} />

            <h3 className="text-lg font-medium">Itin√©raires imbriqu√©s</h3>
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÅ app/
‚îú‚îÄ‚îÄ üìÅ dossier/         # Segment d';itin√©raire
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ dossier/     # Segment d'itin√©raire imbriqu√©
‚îÇ       ‚îî‚îÄ‚îÄ üìÅ dossier/ # Segment d'itin√©raire imbriqu√©
‚îî‚îÄ‚îÄ üìÅ autre/           # Autre segment d'itin√©raire
    ‚îî‚îÄ‚îÄ üìÅ dossier/     # Segment d'itin√©raire imbriqu√©`} />

            <h3 className="text-lg font-medium">Itin√©raires dynamiques</h3>
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÅ [dossier]/   #itin√©raire dynamique
üìÅ ![dossier]   #itin√©raire dynamique facultatif
üìÅ [_dossier]/  #itin√©raire dynamique four tout
üìÅ ![_dossier]/ #itin√©raire dynamique facultatif et four tout 
`} />

            <h3 className="text-lg font-medium">Dossiers priv√©s</h3>
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÅ _dossier/ # Dossier priv√©
`} />

            <h3 className="text-lg font-medium">Organiser votre projet</h3>
            <p className="text-base font-light">
                Outre les conventions relatives aux dossiers et aux fichiers, Nexy n&apos;a pas d&apos;opinion sur la mani√®re dont vous organisez et regroupez les fichiers de votre projet. Cependant, il fournit plusieurs fonctionnalit√©s pour vous aider √† organiser votre projet.
            </p>

            <h4 className="text-base font-medium">Colocation</h4>
            <p className="text-base font-light">
                Dans le r√©pertoire <code className="bg-white/5 p-1 py-0.5 border border-white/10 rounded-md text-[#A9FFEA]">app</code>, des dossiers imbriqu√©s d√©finissent la structure de l&apos;itin√©raire. Chaque dossier repr√©sente un segment d&apos;itin√©raire mapp√© √† un segment correspondant dans un chemin d&apos;URL.
            </p>

            <p className="text-base font-light">
                Cependant, m√™me si la structure de l&apos;itin√©raire est d√©finie via des dossiers, un itin√©raire n&apos;est pas accessible publiquement tant qu&apos;un fichier <code className="bg-white/5 p-1 py-0.5 border border-white/10 rounded-md text-[#A9FFEA]">controller.py</code> n&apos;est pas ajout√© √† un segment d&apos;itin√©raire.
            </p>
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÅ app/
‚îú‚îÄ‚îÄ üìÅ blog/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ controller.py  # Pour le blog
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ service.py    # Services du blog
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ [slug]/
‚îÇ       ‚îú‚îÄ‚îÄ üìÑ controller.py  # Pour /blog/[slug]
‚îÇ       ‚îî‚îÄ‚îÄ üìÑ service.py     # Services des articles
`} />

            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üåê url = /       # n'est pas accessible publiquement
üåê url = /blog   # n'est pas accessible publiquement
üåê url = /blog/1 # n'est pas accessible publiquement
`} />

            <p className="text-base font-light">
                Et, m√™me lorsqu&apos;un itin√©raire est rendu accessible au public, seul le contenu renvoy√© par <code className="bg-white/5 p-1 py-0.5 border border-white/10 rounded-md text-[#A9FFEA]">controller.py</code> est envoy√© au client.
            </p>
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÅ project/
‚îú‚îÄ‚îÄ üìÅ app/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ controller.py  
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ blog/  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ controller.py 
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ [slug]/     
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ controller.py 
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ _docs/  
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ controller.py 
‚îÇ       ‚îî‚îÄ‚îÄ üìÅ [slug]/     
‚îÇ           ‚îî‚îÄ‚îÄ üìÑ controller.py 
`} />

            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üåê url = /        # accessible publiquement
üåê url = /blog    # accessible publiquement
üåê url = /blog/1  # accessible publiquement
üåê url = /docs    # n'est pas accessible , _docs/ est priv√©
üåê url = /docs/1  # n'est pas accessible, _docs/ est priv√©
`} />

            <h3 className="text-lg font-medium">Exemple de structure de projet</h3>
            <p className="text-base font-light">
                L&apos;architecture de base d&apos;un projet Nexy est une symphonie d&apos;organisation, orchestr√©e pour maximiser la clart√© et l&apos;efficacit√© de votre code. Voici un exemple de cette structure harmonieuse et bien pens√©e :
            </p>
            
            <CodeBlock
                copyButton={false}
                language="shell"
                code={`üìÅ Projet/
‚îú‚îÄ‚îÄ üìÅ app/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ controller.py  # Pour la route /
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ view.html
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ layout.html
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ components/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ actions/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ service.py    # Services
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ modals/
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ users/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ controller.py  # Pour /users
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ view.html
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ [id]/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ controller.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ blog/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ controller.py  # Pour /blog
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ [slug]/
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ controller.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ projects/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ [projectId]/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÅ tasks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ üìÑ controller.py
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ üìÅ [taskId]/
‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ üìÑ controller.py
‚îú‚îÄ‚îÄ üìÅ public/
‚îú‚îÄ‚îÄ üìÅ tests/
‚îî‚îÄ‚îÄ üìÑ nexy-config.py`} />
            
            <ul className="list-none space-y-2">
                <li className="text-base font-light before:content-['‚ë†'] before:mr-2 before:text-[#37FCCB]">
                    Familiarisez-vous avec la structure du projet pour bien comprendre l&apos;organisation des fichiers et r√©pertoires. Prenez le temps d&apos;analyser comment chaque composant interagit avec les autres.
                </li>
                <li className="text-base font-light before:content-['‚ë°'] before:mr-2 before:text-[#37FCCB]">
                    Concevez votre premi√®re route pour ajouter des fonctionnalit√©s √† votre application. Commencez par une t√¢che simple, comme une page d&apos;accueil ou une API basique.
                </li>
                <li className="text-base font-light before:content-['‚ë¢'] before:mr-2 before:text-[#37FCCB]">
                    Exp√©rimentez avec les composants Nexy pour cr√©er des interfaces utilisateur r√©utilisables et maintenables.
                </li>
                <li className="text-base font-light before:content-['‚ë£'] before:mr-2 before:text-[#37FCCB]">
                    Explorez les fonctionnalit√©s avanc√©es telles que les WebSockets et les actions serveur pour d√©velopper des applications interactives.
                </li>
            </ul>
            <div className="flex  gap-5 justify-between mt-5">
                <Link href="/docs/started/new_project" className={`cursor-pointer px-4 py-2 text-sm text-left font-normal  rounded-[12px]  bg-[#A9FFEA]/2.5 border border-[#A9FFEA]/5 text-[#A9FFEA] `}>
                ‚Üê Cr√©er un nouveau projet
                </Link>

                <Link href="/docs/started/controllers" className={`cursor-pointer px-4 py-2 text-sm text-left font-normal  rounded-[12px]  bg-[#A9FFEA]/20 border border-[#A9FFEA]/25 text-[#A9FFEA] `}>
                    Controllers ‚Üí
                </Link>

            </div>
        </main>
    );
}
